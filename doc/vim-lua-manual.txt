*vim-lua-manual.txt*      Lua 5.2 Reference Manual             *lua.manual*

                              Lua Manual

1.  Global Variables                        |lua.GlobalVariables|
  1.1.  _G                                      |lua._G|
  1.2.  _VERSION                                |lua._VERSION|
2.  Basic Functions                         |lua.GlobalFunctions|
  2.1.  assert                                  |lua.assert|
  2.2.  collectgarbage                          |lua.collectgarbage|
  2.3.  dofile                                  |lua.dofile|
  2.4.  error                                   |lua.error|
  2.5.  getmetatable                            |lua.getmetatable|
  2.6.  ipairs                                  |lua.ipairs|
  2.7.  load                                    |lua.load|
  2.8.  loadfile                                |lua.loadfile|
  2.9.  next                                    |lua.next|
  2.10. pairs                                   |lua.pairs|
  2.11. pcall                                   |lua.pcall|
  2.12. print                                   |lua.print|
  2.13. rawequal                                |lua.rawequal|
  2.14. rawget                                  |lua.rawget|
  2.15. rawlen                                  |lua.rawlen|
  2.16. rawset                                  |lua.rawset|
  2.17. require                                 |lua.require|
  2.18. select                                  |lua.select|
  2.19. setmetatable                            |lua.setmetatable|
  2.20. tonumber                                |lua.tonumber|
  2.21. tostring                                |lua.tostring|
  2.22. type                                    |lua.type|
  2.23. xpcall                                  |lua.xpcall|
3.  bit32                                   |lua.bit32|
  3.1.  bit32.arshift                           |lua.bit32.arshift|
  3.2.  bit32.band                              |lua.bit32.band|
  3.3.  bit32.bnot                              |lua.bit32.bnot|
  3.4.  bit32.bor                               |lua.bit32.bor|
  3.5.  bit32.btest                             |lua.bit32.btest|
  3.6.  bit32.bxor                              |lua.bit32.bxor|
  3.7.  bit32.extract                           |lua.bit32.extract|
  3.8.  bit32.lrotate                           |lua.bit32.lrotate|
  3.9.  bit32.lshift                            |lua.bit32.lshift|
  3.10. bit32.replace                           |lua.bit32.replace|
  3.11. bit32.rrotate                           |lua.bit32.rrotate|
  3.12. bit32.rshift                            |lua.bit32.rshift|
4.  coroutine                               |lua.coroutine|
  4.1.  coroutine.create                        |lua.coroutine.create|
  4.2.  coroutine.resume                        |lua.coroutine.resume|
  4.3.  coroutine.running                       |lua.coroutine.running|
  4.4.  coroutine.status                        |lua.coroutine.status|
  4.5.  coroutine.wrap                          |lua.coroutine.wrap|
  4.6.  coroutine.yield                         |lua.coroutine.yield|
5.  debug                                   |lua.debug|
  5.1.  debug.debug                             |lua.debug.debug|
  5.2.  debug.getuservalue                      |lua.debug.getuservalue|
  5.3.  debug.gethook                           |lua.debug.gethook|
  5.4.  debug.getinfo                           |lua.debug.getinfo|
  5.5.  debug.getlocal                          |lua.debug.getlocal|
  5.6.  debug.getmetatable                      |lua.debug.getmetatable|
  5.7.  debug.getregistry                       |lua.debug.getregistry|
  5.8.  debug.getupvalue                        |lua.debug.getupvalue|
  5.9.  debug.setuservalue                      |lua.debug.setuservalue|
  5.10. debug.sethook                           |lua.debug.sethook|
  5.11. debug.setlocal                          |lua.debug.setlocal|
  5.12. debug.setmetatable                      |lua.debug.setmetatable|
  5.13. debug.setupvalue                        |lua.debug.setupvalue|
  5.14. debug.traceback                         |lua.debug.traceback|
  5.15. debug.upvalueid                         |lua.debug.upvalueid|
  5.16. debug.upvaluejoin                       |lua.debug.upvaluejoin|
6.  file                                    |lua.file|
  6.1.  file:close                              |lua.file:close|
  6.2.  file:flush                              |lua.file:flush|
  6.3.  file:lines                              |lua.file:lines|
  6.4.  file:read                               |lua.file:read|
  6.5.  file:seek                               |lua.file:seek|
  6.6.  file:setvbuf                            |lua.file:setvbuf|
  6.7.  file:write                              |lua.file:write|
7.  io                                      |lua.io|
  7.1.  io.close                                |lua.io.close|
  7.2.  io.flush                                |lua.io.flush|
  7.3.  io.input                                |lua.io.input|
  7.4.  io.lines                                |lua.io.lines|
  7.5.  io.open                                 |lua.io.open|
  7.6.  io.output                               |lua.io.output|
  7.7.  io.popen                                |lua.io.popen|
  7.8.  io.read                                 |lua.io.read|
  7.9.  io.stderr                               |lua.io.stderr|
  7.10. io.stdin                                |lua.io.stdin|
  7.11. io.stdout                               |lua.io.stdout|
  7.12. io.tmpfile                              |lua.io.tmpfile|
  7.13. io.type                                 |lua.io.type|
  7.14. io.write                                |lua.io.write|
8.  math                                    |lua.math|
  8.1.  math.abs                                |lua.math.abs|
  8.2.  math.acos                               |lua.math.acos|
  8.3.  math.asin                               |lua.math.asin|
  8.4.  math.atan                               |lua.math.atan|
  8.5.  math.atan2                              |lua.math.atan2|
  8.6.  math.ceil                               |lua.math.ceil|
  8.7.  math.cos                                |lua.math.cos|
  8.8.  math.cosh                               |lua.math.cosh|
  8.9.  math.deg                                |lua.math.deg|
  8.10. math.exp                                |lua.math.exp|
  8.11. math.floor                              |lua.math.floor|
  8.12. math.fmod                               |lua.math.fmod|
  8.13. math.frexp                              |lua.math.frexp|
  8.14. math.huge                               |lua.math.huge|
  8.15. math.ldexp                              |lua.math.ldexp|
  8.16. math.log                                |lua.math.log|
  8.17. math.max                                |lua.math.max|
  8.18. math.min                                |lua.math.min|
  8.19. math.modf                               |lua.math.modf|
  8.20. math.pi                                 |lua.math.pi|
  8.21. math.pow                                |lua.math.pow|
  8.22. math.rad                                |lua.math.rad|
  8.23. math.random                             |lua.math.random|
  8.24. math.randomseed                         |lua.math.randomseed|
  8.25. math.sin                                |lua.math.sin|
  8.26. math.sinh                               |lua.math.sinh|
  8.27. math.sqrt                               |lua.math.sqrt|
  8.28. math.tan                                |lua.math.tan|
  8.29. math.tanh                               |lua.math.tanh|
9.  os                                      |lua.os|
  9.1.  os.clock                                |lua.os.clock|
  9.2.  os.date                                 |lua.os.date|
  9.3.  os.difftime                             |lua.os.difftime|
  9.4.  os.execute                              |lua.os.execute|
  9.5.  os.exit                                 |lua.os.exit|
  9.6.  os.getenv                               |lua.os.getenv|
  9.7.  os.remove                               |lua.os.remove|
  9.8.  os.rename                               |lua.os.rename|
  9.9.  os.setlocale                            |lua.os.setlocale|
  9.10. os.time                                 |lua.os.time|
  9.11. os.tmpname                              |lua.os.tmpname|
10. package                                 |lua.package|
  10.1. package.config                          |lua.package.config|
  10.2. package.cpath                           |lua.package.cpath|
  10.3. package.loaded                          |lua.package.loaded|
  10.4. package.loadlib                         |lua.package.loadlib|
  10.5. package.path                            |lua.package.path|
  10.6. package.preload                         |lua.package.preload|
  10.7. package.searchers                       |lua.package.searchers|
  10.8. package.searchpath                      |lua.package.searchpath|
11. string                                  |lua.string|
  11.1.  string.byte                            |lua.string.byte|
  11.2.  string.char                            |lua.string.char|
  11.3.  string.dump                            |lua.string.dump|
  11.4.  string.find                            |lua.string.find|
  11.5.  string.format                          |lua.string.format|
  11.6.  string.gmatch                          |lua.string.gmatch|
  11.7.  string.gsub                            |lua.string.gsub|
  11.8.  string.len                             |lua.string.len|
  11.9.  string.lower                           |lua.string.lower|
  11.10. string.match                           |lua.string.match|
  11.11. string.rep                             |lua.string.rep|
  11.12. string.reverse                         |lua.string.reverse|
  11.13. string.sub                             |lua.string.sub|
  11.14. string.upper                           |lua.string.upper|
  11.15. patterns                               |lua.patterns|
12. table                                   |lua.table|
  12.1.  table.concat                           |lua.table.concat|
  12.2.  table.insert                           |lua.table.insert|
  12.3.  table.pack                             |lua.table.pack|
  12.4.  table.remove                           |lua.table.remove|
  12.5.  table.sort                             |lua.table.sort|
  12.6.  table.unpack                           |lua.table.unpack|

==============================================================================
1.  Global Variables ~
                                            *lua.GlobalVariables*

  1.1.  _G ~
                                                *lua._G*
    A global variable (not a function) that holds the global environment (see
    `http://www.lua.org/manual/5.2/manual.html#2.2`). Lua itself does not use
    this variable; changing its value does not affect any environment, nor
    vice-versa.

  1.2.  _VERSION ~
                                                *lua._VERSION*
    A global variable (not a function) that holds a string containing the
    current interpreter version. The current contents of this variable is
    `Lua_5.2`.

==============================================================================
2.  Basic Functions ~
                                            *lua.GlobalFunctions*

    The basic library provides core functions to Lua. If you do not include
    this library in your application, you should check carefully whether you
    need to provide implementations for some of its facilities.

  2.1.  assert ~
                                                *lua.assert*
>
    assert (v [, message])
<
    Issues an error when the value of its argument v is false (i.e., `nil` or
    `false`); otherwise, returns all its arguments. message is an error message;
    when absent, it defaults to "assertion failed!"

  2.2.  collectgarbage ~
                                                *lua.collectgarbage*
>
    collectgarbage ([opt [, arg]])
<
    This function is a generic interface to the garbage collector. It
    performs different functions according to its first argument, opt:

        `"collect"`: performs a full garbage-collection cycle. This is the
        default option.

        `"stop"`: stops automatic execution of the garbage collector. The
        collector will run only when explicitly invoked, until a call to
        restart it.

        `"restart"`: restarts automatic execution of the garbage collector.

        `"count"`: returns the total memory in use by Lua (in Kbytes) and a
        second value with the total memory in bytes modulo 1024. The first
        value has a fractional part, so the following equality is always true:
>
             k, b = collectgarbage("count")
             assert(k*1024 == math.floor(k)*1024 + b)
<
        `"step"`: performs a garbage-collection step. The step "size" is
        controlled by arg (larger values mean more steps) in a non-specified
        way. If you want to control the step size you must experimentally tune
        the value of arg. Returns `true` if the step finished a collection
        cycle.

        `"setpause"`: sets arg as the new value for the pause of the collector
        (see `http://www.lua.org/manual/5.2/manual.html#2.5`). Returns the
        previous value for pause.

        `"setstepmul"`: sets arg as the new value for the step multiplier of
        the collector (see `http://www.lua.org/manual/5.2/manual.html#2.5`).
        Returns the previous value for step.

        `"isrunning"`: returns a boolean that tells whether the collector is
        running (i.e., not stopped).

        `"generational"`: changes the collector to generational mode. This is
        an experimental feature (see
        `http://www.lua.org/manual/5.2/manual.html#2.5`).

        `"incremental"`: changes the collector to incremental mode. This is
        the default mode.

  2.3.  dofile ~
                                                *lua.dofile*
>
    dofile ([filename])
<
    Opens the named file and executes its contents as a Lua chunk. When called
    without arguments, dofile executes the contents of the standard input
    (stdin). Returns all values returned by the chunk. In case of errors,
    dofile propagates the error to its caller (that is, dofile does not run in
    protected mode).

  2.4.  error ~
                                                *lua.error*
>
    error (message [, level])
<
    Terminates the last protected function called and returns message as the
    error message. Function error never returns.

    Usually, error adds some information about the error position at the
    beginning of the message, if the message is a string. The level argument
    specifies how to get the error position. With level 1 (the default), the
    error position is where the error function was called. Level 2 points the
    error to where the function that called error was called; and so on.
    Passing a level 0 avoids the addition of error position information to the
    message.

  2.5.  getmetatable ~
                                                *lua.getmetatable*
>
    getmetatable (object)
<
    If object does not have a metatable, returns nil. Otherwise, if the
    object's metatable has a "__metatable" field, returns the associated
    value. Otherwise, returns the metatable of the given object.

  2.6.  ipairs ~
                                                *lua.ipairs*
>
    ipairs (t)
<
    If t has a metamethod __ipairs, calls it with t as argument and returns
    the first three results from the call.

    Otherwise, returns three values: an iterator function, the table t, and 0,
    so that the construction
>
        for i,v in ipairs(t) do body end
<
    will iterate over the pairs (1,t[1]), (2,t[2]), ..., up to the first
    integer key absent from the table.

  2.7.  load ~
                                                *lua.load*
>
    load (ld [, source [, mode [, env]]])
<
    Loads a chunk.

    If ld is a string, the chunk is this string. If ld is a function, load
    calls it repeatedly to get the chunk pieces. Each call to ld must return a
    string that concatenates with previous results. A return of an empty
    string, nil, or no value signals the end of the chunk.

    If there are no syntactic errors, returns the compiled chunk as a
    function; otherwise, returns nil plus the error message.

    If the resulting function has upvalues, the first upvalue is set to the
    value of env, if that parameter is given, or to the value of the global
    environment. (When you load a main chunk, the resulting function will
    always have exactly one upvalue, the _ENV variable (see
    `http://www.lua.org/manual/5.2/manual.html#2.2`). When you load a binary
    chunk created from a function (see |lua.string.dump|), the resulting
    function can have arbitrary upvalues.)

    source is used as the source of the chunk for error messages and debug
    information (see `http://www.lua.org/manual/5.2/manual.html#4.9`). When
    absent, it defaults to ld, if ld is a string, or to "=(load)" otherwise.

    The string mode controls whether the chunk can be text or binary (that is,
    a precompiled chunk). It may be the string "b" (only binary chunks), "t"
    (only text chunks), or "bt" (both binary and text). The default is "bt".

  2.8.  loadfile ~
                                                *lua.loadfile*
>
    loadfile ([filename [, mode [, env]]])
<
    Similar to |lua.load|, but gets the chunk from file filename or from the
    standard input, if no file name is given.

  2.9.  next ~
                                                *lua.next*
>
    next (table [, index])
<
    Allows a program to traverse all fields of a table. Its first argument is
    a table and its second argument is an index in this table. next returns
    the next index of the table and its associated value. When called with
    `nil` as its second argument, next returns an initial index and its
    associated value. When called with the last index, or with `nil` in an
    empty table, next returns `nil`. If the second argument is absent, then it
    is interpreted as `nil`. In particular, you can use next(t) to check
    whether a table is empty.

  2.10. pairs ~
                                                *lua.pairs*
>
    pairs (t)
<
    If t has a metamethod __pairs, calls it with t as argument and returns the
    first three results from the call.

    Otherwise, returns three values: the |lua.next| function, the table t, and
    nil, so that the construction
>
        for k,v in pairs(t) do body end
<
    will iterate over all key–value pairs of table t.

    See function |lua.next| for the caveats of modifying the table during its
    traversal.

  2.11. pcall ~
                                                *lua.pcall*
>
    pcall (f [, arg1, ···])
<
    Calls function f with the given arguments in protected mode. This means
    that any error inside f is not propagated; instead, pcall catches the
    error and returns a status code. Its first result is the status code (a
    boolean), which is true if the call succeeds without errors. In such case,
    pcall also returns all results from the call, after this first result. In
    case of any error, pcall returns `false` plus the error message.

  2.12. print ~
                                                *lua.print*
>
    print (···)
<
    Receives any number of arguments and prints their values to stdout, using
    the |lua.tostring| function to convert each argument to a string. print is
    not intended for formatted output, but only as a quick way to show a
    value, for instance for debugging. For complete control over the output,
    use |lua.string.format| and |lua.io.write|.

  2.13. rawequal ~
                                                *lua.rawequal*
>
    rawequal (v1, v2)
<
    Checks whether v1 is equal to v2, without invoking any metamethod. Returns
    a boolean.

  2.14. rawget ~
                                                *lua.rawget*
>
    rawget (table, index)
<
    Gets the real value of table[index], without invoking any metamethod.
    table must be a table; index may be any value.

  2.15. rawlen ~
                                                *lua.rawlen*
>
    rawlen (v)
<
    Returns the length of the object v, which must be a table or a string,
    without invoking any metamethod. Returns an integer number.

  2.16. rawset ~
                                                *lua.rawset*
>
    rawset (table, index, value)
<
    Sets the real value of table[index] to value, without invoking any
    metamethod. table must be a table, index any value different from nil and
    NaN, and value any Lua value.

    This function returns table.

  2.17. require ~
                                                *lua.require*
>
    require (modname)
<
    Loads the given module. The function starts by looking into the
    |lua.package.loaded| table to determine whether modname is already loaded.
    If it is, then require returns the value stored at
    package.loaded[modname]. Otherwise, it tries to find a loader for the
    module.

    To find a loader, require is guided by the |lua.package.searchers|
    sequence. By changing this sequence, we can change how require looks for a
    module. The following explanation is based on the default configuration
    for |lua.package.searchers|.

    First require queries |lua.package.preload|[modname]. If it has a value,
    this value (which should be a function) is the loader. Otherwise require
    searches for a Lua loader using the path stored in |lua.package.path|. If
    that also fails, it searches for a C loader using the path stored in
    |lua.package.cpath|. If that also fails, it tries an all-in-one loader
    (see |lua.package.searchers|).

    Once a loader is found, require calls the loader with two arguments:
    modname and an extra value dependent on how it got the loader. (If the
    loader came from a file, this extra value is the file name.) If the loader
    returns any non-nil value, require assigns the returned value to
    |lua.package.loaded|[modname]. If the loader does not return a non-nil
    value and has not assigned any value to |lua.package.loaded|[modname],
    then require assigns `true` to this entry. In any case, require returns
    the final value of |lua.package.loaded|[modname].

    f there is any error loading or running the module, or if it cannot find
    any loader for the module, then require raises an error.

  2.18. select ~
                                                *lua.select*
>
    select (index, ···)
<
     If index is a number, returns all arguments after argument number index;
     a negative number indexes from the end (-1 is the last argument).
     Otherwise, index must be the string "#", and select returns the total
     number of extra arguments it received.

  2.19. setmetatable ~
                                                *lua.setmetatable*
>
    setmetatable (table, metatable)
<
    Sets the metatable for the given table. (You cannot change the metatable
    of other types from Lua, only from C.) If metatable is `nil`, removes the
    metatable of the given table. If the original metatable has a
    "__metatable" field, raises an error.

  2.20. tonumber ~
                                                *lua.tonumber*
>
    tonumber (e [, base])
<
    When called with no base, tonumber tries to convert its argument to a
    number. If the argument is already a number or a string convertible to a
    number (see `http://www.lua.org/manual/5.2/manual.html#3.4.2`), then
    tonumber returns this number; otherwise, it returns `nil`.

  2.21. tostring ~
                                                *lua.tostring*
>
    tostring (v)
<
    When called with base, then e should be a string to be interpreted as an
    integer numeral in that base. The base may be any integer between 2 and
    36, inclusive. In bases above 10, the letter 'A' (in either upper or lower
    case) represents 10, 'B' represents 11, and so forth, with 'Z'
    representing 35. If the string e is not a valid numeral in the given base,
    the function returns `nil`.

  2.22. type ~
                                                *lua.type*
>
    type (v)
<
    Returns the type of its only argument, coded as a string. The possible
    results of this function are "nil" (a string, not the value nil),
    "number", "string", "boolean", "table", "function", "thread", and
    "userdata".

  2.23. xpcall ~
                                                *lua.xpcall*
>
    xpcall (f, msgh [, arg1, ···])
<
    This function is similar to |lua.pcall|, except that it sets a new message
    handler msgh.

==============================================================================
3.  bit32 ~
                                            *lua.bit32*

    This library provides bitwise operations. It provides all its functions
    inside the table bit32.

    Unless otherwise stated, all functions accept numeric arguments in the
    range (-2^51,+2^51); each argument is normalized to the remainder of its
    division by 2^32 and truncated to an integer (in some unspecified way), so
    that its final value falls in the range [0,2^32 - 1]. Similarly, all
    results are in the range [0,2^32 - 1]. Note that bit32.bnot(0) is
    0xFFFFFFFF, which is different from -1.

  3.1.  bit32.arshift ~
                                                *lua.bit32.arshift*
>
    bit32.arshift (x, disp)
<
    Returns the number x shifted disp bits to the right. The number disp may
    be any representable integer. Negative displacements shift to the left.

    This shift operation is what is called arithmetic shift. Vacant bits on
    the left are filled with copies of the higher bit of x; vacant bits on the
    right are filled with zeros. In particular, displacements with absolute
    values higher than 31 result in zero or 0xFFFFFFFF (all original bits are
    shifted out).

  3.2.  bit32.band ~
                                                *lua.bit32.band*
>
    bit32.band (···)
<
    Returns the bitwise and of its operands.

  3.3.  bit32.bnot ~
                                                *lua.bit32.bnot*
>
    bit32.bnot (x)
<
    Returns the bitwise negation of x. For any integer x, the following
    identity holds:
>
        assert(bit32.bnot(x) == (-1 - x) % 2^32)
<
  3.4.  bit32.bor ~
                                                *lua.bit32.bor*
>
    bit32.bor (···)
<
    Returns the bitwise or of its operands.

  3.5.  bit32.btest ~
                                                *lua.bit32.btest*
>
    bit32.btest (···)
<
    Returns a boolean signaling whether the bitwise and of its operands is
    different from zero.

  3.6.  bit32.bxor ~
                                                *lua.bit32.bxor*
>
    bit32.bxor (···)
<
    Returns the bitwise exclusive or of its operands.

  3.7.  bit32.extract ~
                                                *lua.bit32.extract*
>
    bit32.extract (n, field [, width])
<
    Returns the unsigned number formed by the bits field to field + width - 1
    from n. Bits are numbered from 0 (least significant) to 31 (most
    significant). All accessed bits must be in the range [0, 31].

    The default for width is 1.

  3.8.  bit32.lrotate ~
                                                *lua.bit32.lrotate*
>
    bit32.lrotate (x, disp)
<
    Returns the number x rotated disp bits to the left. The number disp may be
    any representable integer.

    For any valid displacement, the following identity holds:
>
        assert(bit32.lrotate(x, disp) == bit32.lrotate(x, disp % 32))
<
    In particular, negative displacements rotate to the right.

  3.9.  bit32.lshift ~
                                                *lua.bit32.lshift*
>
    bit32.lshift (x, disp)
<
    Returns the number x shifted disp bits to the left. The number disp may be
    any representable integer. Negative displacements shift to the right. In
    any direction, vacant bits are filled with zeros. In particular,
    displacements with absolute values higher than 31 result in zero (all bits
    are shifted out).

    For positive displacements, the following equality holds:
>
        assert(bit32.lshift(b, disp) == (b * 2^disp) % 2^32)
<
  3.10. bit32.replace ~
                                                *lua.bit32.replace*
>
    bit32.replace (n, v, field [, width])
<
    Returns a copy of n with the bits field to field + width - 1 replaced by
    the value v. See |lua.bit32.extract| for details about field and width.

  3.11. bit32.rrotate ~
                                                *lua.bit32.rrotate*
>
    bit32.rrotate (x, disp)
<
    Returns the number x rotated disp bits to the right. The number disp may
    be any representable integer.

    For any valid displacement, the following identity holds:
>
        assert(bit32.rrotate(x, disp) == bit32.rrotate(x, disp % 32))
<
    In particular, negative displacements rotate to the left.

  3.12. bit32.rshift ~
                                                *lua.bit32.rshift*
>
    bit32.rshift (x, disp)
<
    Returns the number x shifted disp bits to the right. The number disp may
    be any representable integer. Negative displacements shift to the left. In
    any direction, vacant bits are filled with zeros. In particular,
    displacements with absolute values higher than 31 result in zero (all bits
    are shifted out).

    For positive displacements, the following equality holds:
>
        assert(bit32.rshift(b, disp) == math.floor(b % 2^32 / 2^disp))
<
    This shift operation is what is called logical shift.

==============================================================================
4.  coroutine ~
                                            *lua.coroutine*

    The operations related to coroutines comprise a sub-library of the basic
    library and come inside the table coroutine. See
    `http://www.lua.org/manual/5.2/manual.html#2.6` for a general description
    of coroutines.

  4.1.  coroutine.create ~
                                                *lua.coroutine.create*
>
    coroutine.create (f)
<
    Creates a new coroutine, with body f. f must be a Lua function. Returns
    this new coroutine, an object with type "thread".

  4.2.  coroutine.resume ~
                                                *lua.coroutine.resume*
>
    coroutine.resume (co [, val1, ···])
<
    Starts or continues the execution of coroutine co. The first time you
    resume a coroutine, it starts running its body. The values val1, ... are
    passed as the arguments to the body function. If the coroutine has
    yielded, resume restarts it; the values val1, ... are passed as the
    results from the yield.

    If the coroutine runs without any errors, resume returns `true` plus any
    values passed to yield (if the coroutine yields) or any values returned by
    the body function (if the coroutine terminates). If there is any error,
    resume returns `false` plus the error message.

  4.3.  coroutine.running ~
                                                *lua.coroutine.running*
>
    coroutine.running ()
<
    Returns the running coroutine plus a boolean, true when the running
    coroutine is the main one.

  4.4.  coroutine.status ~
                                                *lua.coroutine.status*
>
    coroutine.status (co)
<
    Returns the status of coroutine co, as a string: `"running"`, if the
    coroutine is running (that is, it called status); `"suspended"`, if the
    coroutine is suspended in a call to yield, or if it has not started
    running yet; `"normal"` if the coroutine is active but not running (that
    is, it has resumed another coroutine); and `"dead"` if the coroutine has
    finished its body function, or if it has stopped with an error.

  4.5.  coroutine.wrap ~
                                                *lua.coroutine.wrap*
>
    coroutine.wrap (f)
<
    Creates a new coroutine, with body f. f must be a Lua function. Returns a
    function that resumes the coroutine each time it is called. Any arguments
    passed to the function behave as the extra arguments to resume. Returns
    the same values returned by resume, except the first boolean. In case of
    error, propagates the error.

  4.6.  coroutine.yield ~
                                                *lua.coroutine.yield*
>
    coroutine.yield (···)
<
    Suspends the execution of the calling coroutine. Any arguments to yield
    are passed as extra results to resume.

==============================================================================
5.  debug ~
                                            *lua.debug*

    This library provides the functionality of the debug interface
    (`http://www.lua.org/manual/5.2/manual.html#4.9`) to Lua programs. You
    should exert care when using this library. Several of its functions
    violate basic assumptions about Lua code (e.g., that variables local to a
    function cannot be accessed from outside; that userdata metatables cannot
    be changed by Lua code; that Lua programs do not crash) and therefore can
    compromise otherwise secure code. Moreover, some functions in this library
    may be slow.

    All functions in this library are provided inside the debug table. All
    functions that operate over a thread have an optional first argument which
    is the thread to operate over. The default is always the current thread.

  5.1.  debug.debug ~
                                                *lua.debug.debug*
>
    debug.debug ()
<
    Enters an interactive mode with the user, running each string that the
    user enters. Using simple commands and other debug facilities, the user
    can inspect global and local variables, change their values, evaluate
    expressions, and so on. A line containing only the word cont finishes this
    function, so that the caller continues its execution.

    Note that commands for debug.debug are not lexically nested within any
    function and so have no direct access to local variables.

  5.2.  debug.getuservalue ~
                                                *lua.debug.getuservalue*
>
    debug.getuservalue (u)
<
    Returns the Lua value associated to u. If u is not a userdata, returns
    `nil`.

  5.3.  debug.gethook ~
                                                *lua.debug.gethook*
>
    debug.gethook ([thread])
<
    Returns the current hook settings of the thread, as three values: the
    current hook function, the current hook mask, and the current hook count
    (as set by the |lua.debug.sethook| function).

  5.4.  debug.getinfo ~
                                                *lua.debug.getinfo*
>
    debug.getinfo ([thread,] f [, what])
<
    Returns a table with information about a function. You can give the
    function directly or you can give a number as the value of f, which means
    the function running at level f of the call stack of the given thread:
    level 0 is the current function (getinfo itself); level 1 is the function
    that called getinfo (except for tail calls, which do not count on the
    stack); and so on. If f is a number larger than the number of active
    functions, then getinfo returns `nil`.

    The returned table can contain all the fields returned by
    |lua.lua_getinfo|, with the string what describing which fields to fill
    in. The default for what is to get all information available, except the
    table of valid lines. If present, the option 'f' adds a field named func
    with the function itself. If present, the option 'L' adds a field named
    activelines with the table of valid lines.

    For instance, the expression debug.getinfo(1,"n").name returns a table
    with a name for the current function, if a reasonable name can be found,
    and the expression debug.getinfo(print) returns a table with all available
    information about the |lua.print| function.

  5.5.  debug.getlocal ~
                                                *lua.debug.getlocal*
>
    debug.getlocal ([thread,] f, local)
<
    This function returns the name and the value of the local variable with
    index local of the function at level f of the stack. This function
    accesses not only explicit local variables, but also parameters,
    temporaries, etc.

  5.6.  debug.getmetatable ~
                                                *lua.debug.getmetatable*
>
    debug.getmetatable (value)
<
    Returns the metatable of the given value or nil if it does not have a
    metatable.

  5.7.  debug.getregistry ~
                                                *lua.debug.getregistry*
>
    debug.getregistry ()
<
    Returns the registry table (see
    `http://www.lua.org/manual/5.2/manual.html#4.5`).

  5.8.  debug.getupvalue ~
                                                *lua.debug.getupvalue*
>
    debug.getupvalue (f, up)
<
    This function returns the name and the value of the upvalue with index up
    of the function f. The function returns nil if there is no upvalue with
    the given index.

  5.9.  debug.setuservalue ~
                                                *lua.debug.setuservalue*
>
    debug.setuservalue (udata, value)
<
    Sets the given value as the Lua value associated to the given udata. value
    must be a table or nil; udata must be a full userdata.

    Returns udata.

  5.10. debug.sethook ~
                                                *lua.debug.sethook*
>
    debug.sethook ([thread,] hook, mask [, count])
<
    Sets the given function as a hook. The string mask and the number count
    describe when the hook will be called. The string mask may have the
    following characters, with the given meaning:

    `'c'`: the hook is called every time Lua calls a function;
    `'r'`: the hook is called every time Lua returns from a function;
    `'l'`: the hook is called every time Lua enters a new line of code.

    With a count different from zero, the hook is called after every count
    instructions.

    When called without arguments, debug.sethook turns off the hook.

    When the hook is called, its first parameter is a string describing the
    event that has triggered its call: "call" (or "tail call"), "return",
    "line", and "count". For line events, the hook also gets the new line
    number as its second parameter. Inside a hook, you can call getinfo with
    level 2 to get more information about the running function (level 0 is the
    getinfo function, and level 1 is the hook function).

  5.11. debug.setlocal ~
                                                *lua.debug.setlocal*
>
    debug.setlocal ([thread,] level, local, value)
<
    This function assigns the value value to the local variable with index
    local of the function at level level of the stack. The function returns
    nil if there is no local variable with the given index, and raises an
    error when called with a level out of range. (You can call getinfo to
    check whether the level is valid.) Otherwise, it returns the name of the
    local variable.

    See |lua.debug.getlocal| for more information about variable indices and
    names.

  5.12. debug.setmetatable ~
                                                *lua.debug.setmetatable*
>
    debug.setmetatable (value, table)
<
    Sets the metatable for the given value to the given table (which can be
    nil). Returns value.

  5.13. debug.setupvalue ~
                                                *lua.debug.setupvalue*
>
    debug.setupvalue (f, up, value)
<
    This function assigns the value value to the upvalue with index up of the
    function f. The function returns nil if there is no upvalue with the given
    index. Otherwise, it returns the name of the upvalue.

  5.14. debug.traceback ~
                                                *lua.debug.traceback*
>
    debug.traceback ([thread,] [message [, level]])
<
    If message is present but is neither a string nor nil, this function
    returns message without further processing. Otherwise, it returns a string
    with a traceback of the call stack. An optional message string is appended
    at the beginning of the traceback. An optional level number tells at which
    level to start the traceback (default is 1, the function calling
    traceback).

  5.15. debug.upvalueid ~
                                                *lua.debug.upvalueid*
>
    debug.upvalueid (f, n)
<
    Returns an unique identifier (as a light userdata) for the upvalue
    numbered n from the given function.

    These unique identifiers allow a program to check whether different
    closures share upvalues. Lua closures that share an upvalue (that is, that
    access a same external local variable) will return identical ids for those
    upvalue indices.

  5.16. debug.upvaluejoin ~
                                                *lua.debug.upvaluejoin*
>
    debug.upvaluejoin (f1, n1, f2, n2)
<
    Make the n1-th upvalue of the Lua closure f1 refer to the n2-th upvalue of
    the Lua closure f2.

==============================================================================
6.  file ~
                                            *lua.file*
  6.1.  file:close ~
                                                *lua.file:close*
>
    file:close ()
<
    Closes file. Note that files are automatically closed when their handles
    are garbage collected, but that takes an unpredictable amount of time to
    happen.

    When closing a file handle created with |lua.io.popen|, |lua.file:close|
    returns the same values returned by |lua.os.execute|.

  6.2.  file:flush ~
                                                *lua.file:flush*
>
    file:flush ()
<
    Saves any written data to file.

  6.3.  file:lines ~
                                                *lua.file:lines*
>
    file:lines (···)
<
    Returns an iterator function that, each time it is called, reads the file
    according to the given formats. When no format is given, uses "*l" as a
    default. As an example, the construction
>
        for c in file:lines(1) do body end
<
    will iterate over all characters of the file, starting at the current
    position. Unlike |lua.io.lines|, this function does not close the file
    when the loop ends.

    In case of errors this function raises the error, instead of returning an
    error code.

  6.4.  file:read ~
                                                *lua.file:read*
>
    file:read (···)
<
    Reads the file file, according to the given formats, which specify what to
    read. For each format, the function returns a string (or a number) with
    the characters read, or `nil` if it cannot read data with the specified
    format. When called without formats, it uses a default format that reads
    the next line (see below).

    The available formats are

        `"*n"`: reads a number; this is the only format that returns a number
        instead of a string.

        `"*a"`: reads the whole file, starting at the current position. On end
        of file, it returns the empty string.

        `"*l"`: reads the next line skipping the end of line, returning `nil`
        on end of file. This is the default format.

        `"*L"`: reads the next line keeping the end of line (if present),
        returning `nil` on end of file.

        `number`: reads a string with up to this number of bytes, returning
        `nil` on end of file. If number is zero, it reads nothing and returns
        an empty string, or `nil` on end of file.

  6.5.  file:seek ~
                                                *lua.file:seek*
>
    file:seek ([whence [, offset]])
<
    Sets and gets the file position, measured from the beginning of the file,
    to the position given by offset plus a base specified by the string
    whence, as follows:

        `"set"`: base is position 0 (beginning of the file);

        `"cur"`: base is current position;

        `"end"`: base is end of file;

    In case of success, seek returns the final file position, measured in
    bytes from the beginning of the file. If seek fails, it returns nil, plus
    a string describing the error.

    The default value for whence is "cur", and for offset is 0. Therefore, the
    call file:seek() returns the current file position, without changing it;
    the call file:seek("set") sets the position to the beginning of the file
    (and returns 0); and the call file:seek("end") sets the position to the
    end of the file, and returns its size.

  6.6.  file:setvbuf ~
                                                *lua.file:setvbuf*
>
    file:setvbuf (mode [, size])
<
    Sets the buffering mode for an output file. There are three available
    modes:

        `"no"`: no buffering; the result of any output operation appears
        immediately.

        `"full"`: full buffering; output operation is performed only when the
        buffer is full or when you explicitly flush the file (see
        |lua.io.flush|).

        `"line"`: line buffering; output is buffered until a newline is output
        or there is any input from some special files (such as a terminal
        device).

    For the last two cases, size specifies the size of the buffer, in bytes.
    The default is an appropriate size.

  6.7.  file:write ~
                                                *lua.file:write*
>
    file:write (···)
<
    Writes the value of each of its arguments to file. The arguments must be
    strings or numbers.

    In case of success, this function returns file. Otherwise it returns nil
    plus a string describing the error.

==============================================================================
7.  io ~
                                            *lua.io*

    The I/O library provides two different styles for file manipulation. The
    first one uses implicit file descriptors; that is, there are operations to
    set a default input file and a default output file, and all input/output
    operations are over these default files. The second style uses explicit
    file descriptors.

    When using implicit file descriptors, all operations are supplied by table
    io. When using explicit file descriptors, the operation |lua.io.open|
    returns a file descriptor and then all operations are supplied as methods
    of the file descriptor.

    The table io also provides three predefined file descriptors with their
    usual meanings from C: io.stdin, io.stdout, and io.stderr. The I/O library
    never closes these files.

    Unless otherwise stated, all I/O functions return nil on failure (plus an
    error message as a second result and a system-dependent error code as a
    third result) and some value different from nil on success. On non-Posix
    systems, the computation of the error message and error code in case of
    errors may be not thread safe, because they rely on the global C variable
    errno.

  7.1.  io.close ~
                                                *lua.io.close*
>
    io.close ([file])
<
    Equivalent to |lua.file:close|(). Without a file, closes the default
    output file.

  7.2.  io.flush ~
                                                *lua.io.flush*
>
    io.flush ()
<
    Equivalent to io.output():flush().

  7.3.  io.input ~
                                                *lua.io.input*
>
    io.input ([file])
<
    When called with a file name, it opens the named file (in text mode), and
    sets its handle as the default input file. When called with a file handle,
    it simply sets this file handle as the default input file. When called
    without parameters, it returns the current default input file.

    In case of errors this function raises the error, instead of returning an
    error code.

  7.4.  io.lines ~
                                                *lua.io.lines*
>
    io.lines ([filename ···])
<
    Opens the given file name in read mode and returns an iterator function
    that works like |lua.file:lines|(···) over the opened file. When the
    iterator function detects the end of file, it returns `nil` (to finish the
    loop) and automatically closes the file.

    The call io.lines() (with no file name) is equivalent to
    io.input():lines(); that is, it iterates over the lines of the default
    input file. In this case it does not close the file when the loop ends.

    In case of errors this function raises the error, instead of returning an
    error code.

  7.5.  io.open ~
                                                *lua.io.open*
>
    io.open (filename [, mode])
<
    This function opens a file, in the mode specified in the string mode. It
    returns a new file handle, or, in case of errors, `nil` plus an error
    message.

    The mode string can be any of the following:

        `"r"` : read mode (the default);
        `"w"` : write mode;
        `"a"` : append mode;
        `"r+"`: update mode, all previous data is preserved;
        `"w+"`: update mode, all previous data is erased;
        `"a+"`: append update mode, previous data is preserved, writing is
        only allowed at the end of file.

    The mode string can also have a 'b' at the end, which is needed in some
    systems to open the file in binary mode.

  7.6.  io.output ~
                                                *lua.io.output*
>
    io.output ([file])
<
    Similar to |lua.io.input|, but operates over the default output file.

  7.7.  io.popen ~
                                                *lua.io.popen*
>
    io.popen (prog [, mode])
<
    This function is system dependent and is not available on all platforms.

    Starts program prog in a separated process and returns a file handle that
    you can use to read data from this program (if mode is "r", the default)
    or to write data to this program (if mode is "w").

  7.8.  io.read ~
                                                *lua.io.read*
>
    io.read (···)
<
    Equivalent to io.input():read(···).

  7.9.  io.stderr ~
                                                *lua.io.stderr*
    Predefined file descriptors from C. The I/O library never closes these
    files.

  7.10. io.stdin ~
                                                *lua.io.stdin*
    Predefined file descriptors from C. The I/O library never closes these
    files.

  7.11. io.stdout ~
                                                *lua.io.stdout*
    Predefined file descriptors from C. The I/O library never closes these
    files.

  7.12. io.tmpfile ~
                                                *lua.io.tmpfile*
>
    io.tmpfile ()
<
    Returns a handle for a temporary file. This file is opened in update mode
    and it is automatically removed when the program ends.

  7.13. io.type ~
                                                *lua.io.type*
>
    io.type (obj)
<
    Checks whether obj is a valid file handle. Returns the string "file" if
    obj is an open file handle, "closed file" if obj is a closed file handle,
    or nil if obj is not a file handle.

  7.14. io.write ~
                                                *lua.io.write*
>
    io.write (···)
<
    Equivalent to io.output():write(···).

==============================================================================
8.  math ~
                                            *lua.math*

    This library is an interface to the standard C math library. It provides
    all its functions inside the table math.

  8.1.  math.abs ~
                                                *lua.math.abs*
>
    math.abs (x)
<
    Returns the absolute value of x.

  8.2.  math.acos ~
                                                *lua.math.acos*
>
    math.acos (x)
<
    Returns the arc cosine of x (in radians).

  8.3.  math.asin ~
                                                *lua.math.asin*
>
    math.asin (x)
<
    Returns the arc sine of x (in radians).

  8.4.  math.atan ~
                                                *lua.math.atan*
>
    math.atan (x)
<
    Returns the arc tangent of x (in radians).

  8.5.  math.atan2 ~
                                                *lua.math.atan2*
>
    math.atan2 (y, x)
<
    Returns the arc tangent of y/x (in radians), but uses the signs of both
    parameters to find the quadrant of the result. (It also handles correctly
    the case of x being zero.)

  8.6.  math.ceil ~
                                                *lua.math.ceil*
>
    math.ceil (x)
<
    Returns the smallest integer larger than or equal to x.

  8.7.  math.cos ~
                                                *lua.math.cos*
>
    math.cos (x)
<
    Returns the cosine of x (assumed to be in radians).

  8.8.  math.cosh ~
                                                *lua.math.cosh*
>
    math.cosh (x)
<
    Returns the hyperbolic cosine of x.

  8.9.  math.deg ~
                                                *lua.math.deg*
>
    math.deg (x)
<
    Returns the angle x (given in radians) in degrees.

  8.10. math.exp ~
                                                *lua.math.exp*
>
    math.exp (x)
<
    Returns the value e^x.

  8.11. math.floor ~
                                                *lua.math.floor*
>
    math.floor (x)
<
    Returns the largest integer smaller than or equal to x.

  8.12. math.fmod ~
                                                *lua.math.fmod*
>
    math.fmod (x, y)
<
    Returns the remainder of the division of x by y that rounds the quotient
    towards zero.

  8.13. math.frexp ~
                                                *lua.math.frexp*
>
    math.frexp (x)
<
    Returns m and e such that x = m*2^e, e is an integer and the absolute
    value of m is in the range [0.5, 1) (or zero when x is zero).

  8.14. math.huge ~
                                                *lua.math.huge*
>
    math.huge
<
    The value HUGE_VAL, a value larger than or equal to any other numerical
    value.

  8.15. math.ldexp ~
                                                *lua.math.ldexp*
>
    math.ldexp (m, e)
<
    Returns m*2^e (e should be an integer).

  8.16. math.log ~
                                                *lua.math.log*
>
    math.log (x [, base])
<
    Returns the logarithm of x in the given base. The default for base is e
    (so that the function returns the natural logarithm of x).

  8.17. math.max ~
                                                *lua.math.max*
>
    math.max (x, ···)
<
    Returns the maximum value among its arguments.

  8.18. math.min ~
                                                *lua.math.min*
>
    math.min (x, ···)
<
    Returns the minimum value among its arguments.

  8.19. math.modf ~
                                                *lua.math.modf*
>
    math.modf (x)
<
    Returns two numbers, the integral part of x and the fractional part of x.

  8.20. math.pi ~
                                                *lua.math.pi*
>
    math.pi
<
    The value of π.

  8.21. math.pow ~
                                                *lua.math.pow*
>
    math.pow (x, y)
<
    Returns x^y.

  8.22. math.rad ~
                                                *lua.math.rad*
>
    math.rad (x)
<
    Returns the angle x (given in degrees) in radians.

  8.23. math.random ~
                                                *lua.math.random*
>
    math.random ([m [, n]])
<
    This function is an interface to the simple pseudo-random generator
    function rand provided by Standard C. (No guarantees can be given for its
    statistical properties.)

    When called without arguments, returns a uniform pseudo-random real number
    in the range [0,1). When called with an integer number m, math.random
    returns a uniform pseudo-random integer in the range [1, m]. When called
    with two integer numbers m and n, math.random returns a uniform
    pseudo-random integer in the range [m, n].

  8.24. math.randomseed ~
                                                *lua.math.randomseed*
>
    math.randomseed (x)
<
    Sets x as the "seed" for the pseudo-random generator: equal seeds produce
    equal sequences of numbers.

  8.25. math.sin ~
                                                *lua.math.sin*
>
    math.sin (x)
<
    Returns the sine of x (assumed to be in radians).

  8.26. math.sinh ~
                                                *lua.math.sinh*
>
    math.sinh (x)
<
    Returns the hyperbolic sine of x.

  8.27. math.sqrt ~
                                                *lua.math.sqrt*
>
    math.sqrt (x)
<
    Returns the square root of x. (You can also use the expression x^0.5 to
    compute this value.)

  8.28. math.tan ~
                                                *lua.math.tan*
>
    math.tan (x)
<
    Returns the tangent of x (assumed to be in radians).

  8.29. math.tanh ~
                                                *lua.math.tanh*
>
    math.tanh (x)
<
    Returns the hyperbolic tangent of x.

==============================================================================
9.  os ~
                                            *lua.os*

    This library is implemented through table os.

  9.1.  os.clock ~
                                                *lua.os.clock*
>
    os.clock ()
<
    Returns an approximation of the amount in seconds of CPU time used by the
    program.

  9.2.  os.date ~
                                                *lua.os.date*
>
    os.date ([format [, time]])
<
    Returns a string or a table containing date and time, formatted according
    to the given string format.

    If the time argument is present, this is the time to be formatted (see the
    |lua.os.time| function for a description of this value). Otherwise, date
    formats the current time.

    If format starts with '!', then the date is formatted in Coordinated
    Universal Time. After this optional character, if format is the string
    "*t", then date returns a table with the following fields: year (four
    digits), month (1–12), day (1–31), hour (0–23), min (0–59), sec (0–61),
    wday (weekday, Sunday is 1), yday (day of the year), and isdst (daylight
    saving flag, a boolean). This last field may be absent if the information
    is not available.

    If format is not "*t", then date returns the date as a string, formatted
    according to the same rules as the ANSI C function strftime.

    When called without arguments, date returns a reasonable date and time
    representation that depends on the host system and on the current locale
    (that is, os.date() is equivalent to os.date("%c")).

    On non-Posix systems, this function may be not thread safe because of its
    reliance on C function gmtime and C function localtime.

  9.3.  os.difftime ~
                                                *lua.os.difftime*
>
    os.difftime (t2, t1)
<
    Returns the number of seconds from time t1 to time t2. In POSIX, Windows,
    and some other systems, this value is exactly t2-t1.

  9.4.  os.execute ~
                                                *lua.os.execute*
>
    os.execute ([command])
<
    This function is equivalent to the ANSI C function system. It passes
    command to be executed by an operating system shell. Its first result is
    true if the command terminated successfully, or nil otherwise. After this
    first result the function returns a string and a number, as follows:

        `"exit"`: the command terminated normally; the following number is the
        exit status of the command.
        `"signal"`: the command was terminated by a signal; the following
        number is the signal that terminated the command.

    When called without a command, os.execute returns a boolean that is true
    if a shell is available.

  9.5.  os.exit ~
                                                *lua.os.exit*
>
    os.exit ([code [, close])
<
    Calls the ANSI C function exit to terminate the host program. If code is
    true, the returned status is EXIT_SUCCESS; if code is false, the returned
    status is EXIT_FAILURE; if code is a number, the returned status is this
    number. The default value for code is true.

    If the optional second argument close is true, closes the Lua state before
    exiting.

  9.6.  os.getenv ~
                                                *lua.os.getenv*
>
    os.getenv (varname)
<
    Returns the value of the process environment variable varname, or nil if
    the variable is not defined.

  9.7.  os.remove ~
                                                *lua.os.remove*
>
    os.remove (filename)
<
    Deletes the file (or empty directory, on POSIX systems) with the given
    name. If this function fails, it returns nil, plus a string describing the
    error and the error code.

  9.8.  os.rename ~
                                                *lua.os.rename*
>
    os.rename (oldname, newname)
<
    Renames file or directory named oldname to newname. If this function
    fails, it returns nil, plus a string describing the error and the error
    code.

  9.9.  os.setlocale ~
                                                *lua.os.setlocale*
>
    os.setlocale (locale [, category])
<
    Sets the current locale of the program. locale is a system-dependent
    string specifying a locale; category is an optional string describing
    which category to change: "all", "collate", "ctype", "monetary",
    "numeric", or "time"; the default category is "all". The function returns
    the name of the new locale, or nil if the request cannot be honored.

    If locale is the empty string, the current locale is set to an
    implementation-defined native locale. If locale is the string "C", the
    current locale is set to the standard C locale.

    When called with nil as the first argument, this function only returns the
    name of the current locale for the given category.

    This function may be not thread safe because of its reliance on C function
    setlocale.

  9.10. os.time ~
                                                *lua.os.time*
>
    os.time ([table])
<
    Returns the current time when called without arguments, or a time
    representing the date and time specified by the given table. This table
    must have fields year, month, and day, and may have fields hour (default
    is 12), min (default is 0), sec (default is 0), and isdst (default is
    nil). For a description of these fields, see the os.date function.

    The returned value is a number, whose meaning depends on your system. In
    POSIX, Windows, and some other systems, this number counts the number of
    seconds since some given start time (the "epoch"). In other systems, the
    meaning is not specified, and the number returned by time can be used only
    as an argument to |lua.os.date| and |lua.os.difftime|.

  9.11. os.tmpname ~
                                                *lua.os.tmpname*
>
    os.tmpname ()
<
    Returns a string with a file name that can be used for a temporary file.
    The file must be explicitly opened before its use and explicitly removed
    when no longer needed.

    On POSIX systems, this function also creates a file with that name, to
    avoid security risks. (Someone else might create the file with wrong
    permissions in the time between getting the name and creating the file.)
    You still have to open the file to use it and to remove it (even if you do
    not use it).

    When possible, you may prefer to use |lua.io.tmpfile|, which automatically
    removes the file when the program ends.

==============================================================================
10. package ~
                                            *lua.package*

    The package library provides basic facilities for loading modules in Lua.
    It exports one function directly in the global environment: |lua.require|.
    Everything else is exported in a table package.

  10.1. package.config ~
                                                *lua.package.config*
>
    package.config
<
    A string describing some compile-time configurations for packages. This
    string is a sequence of lines:

        The first line is the directory separator string. Default is '\' for
        Windows and '/' for all other systems.

        The second line is the character that separates templates in a path.
        Default is ';'.

        The third line is the string that marks the substitution points in a
        template. Default is '?'.

        The fourth line is a string that, in a path in Windows, is replaced by
        the executable's directory. Default is '!'.

        The fifth line is a mark to ignore all text before it when building
        the luaopen_ function name. Default is '-'.

  10.2. package.cpath ~
                                                *lua.package.cpath*
>
    package.cpath
<
    The path used by |lua.require| to search for a C loader.

    Lua initializes the C path package.cpath in the same way it initializes
    the Lua path package.path, using the environment variable LUA_CPATH_5_2 or
    the environment variable LUA_CPATH or a default path defined in luaconf.h.

  10.3. package.loaded ~
                                                *lua.package.loaded*
>
    package.loaded
<
    A table used by |lua.require| to control which modules are already loaded.
    When you require a module modname and package.loaded[modname] is not
    false, |lua.require| simply returns the value stored there.

    This variable is only a reference to the real table; assignments to this
    variable do not change the table used by |lua.require|.

  10.4. package.loadlib ~
                                                *lua.package.loadlib*
>
    package.loadlib (libname, funcname)
<
    Dynamically links the host program with the C library libname.

    If funcname is "*", then it only links with the library, making the
    symbols exported by the library available to other dynamically linked
    libraries. Otherwise, it looks for a function funcname inside the library
    and returns this function as a C function. So, funcname must follow the
    |lua.lua_CFunction| prototype (see |lua.lua_CFunction|).

    This is a low-level function. It completely bypasses the package and
    module system. Unlike |lua.require|, it does not perform any path
    searching and does not automatically adds extensions. libname must be the
    complete file name of the C library, including if necessary a path and an
    extension. funcname must be the exact name exported by the C library
    (which may depend on the C compiler and linker used).

    This function is not supported by Standard C. As such, it is only
    available on some platforms (Windows, Linux, Mac OS X, Solaris, BSD, plus
    other Unix systems that support the dlfcn standard).

  10.5. package.path ~
                                                *lua.package.path*
>
    package.path
<
    The path used by |lua.require| to search for a Lua loader.

    At start-up, Lua initializes this variable with the value of the
    environment variable LUA_PATH_5_2 or the environment variable LUA_PATH or
    with a default path defined in luaconf.h, if those environment variables
    are not defined. Any ";;" in the value of the environment variable is
    replaced by the default path.

  10.6. package.preload ~
                                                *lua.package.preload*
>
    package.preload
<
    A table to store loaders for specific modules (see |lua.require|).

    This variable is only a reference to the real table; assignments to this
    variable do not change the table used by |lua.require|.

  10.7. package.searchers ~
                                                *lua.package.searchers*
>
    package.searchers
<
    A table used by |lua.require| to control how to load modules.

    Each entry in this table is a searcher function. When looking for a
    module, |lua.require| calls each of these searchers in ascending order,
    with the module name (the argument given to |lua.require|) as its sole
    parameter. The function can return another function (the module loader)
    plus an extra value that will be passed to that loader, or a string
    explaining why it did not find that module (or nil if it has nothing to
    say).

    Lua initializes this table with four searcher functions.

    The first searcher simply looks for a loader in the |lua.package.preload|
    table.

    The second searcher looks for a loader as a Lua library, using the path
    stored at |lua.package.path|. The search is done as described in function
    |lua.package.searchpath|.

    The third searcher looks for a loader as a C library, using the path given
    by the variable |lua.package.cpath|. Again, the search is done as
    described in function |lua.package.searchpath|. For instance, if the C
    path is the string
>
      "./?.so;./?.dll;/usr/local/?/init.so"
<
    the searcher for module foo will try to open the files ./foo.so,
    ./foo.dll, and /usr/local/foo/init.so, in that order. Once it finds a C
    library, this searcher first uses a dynamic link facility to link the
    application with the library. Then it tries to find a C function inside
    the library to be used as the loader. The name of this C function is the
    string "luaopen_" concatenated with a copy of the module name where each
    dot is replaced by an underscore. Moreover, if the module name has a
    hyphen, its prefix up to (and including) the first hyphen is removed. For
    instance, if the module name is a.v1-b.c, the function name will be
    luaopen_b_c.

    The fourth searcher tries an all-in-one loader. It searches the C path for
    a library for the root name of the given module. For instance, when
    requiring a.b.c, it will search for a C library for a. If found, it looks
    into it for an open function for the submodule; in our example, that would
    be luaopen_a_b_c. With this facility, a package can pack several C
    submodules into one single library, with each submodule keeping its
    original open function.

    All searchers except the first one (preload) return as the extra value the
    file name where the module was found, as returned by
    |lua.package.searchpath|. The first searcher returns no extra value.

  10.8. package.searchpath ~
                                                *lua.package.searchpath*
>
    package.searchpath (name, path [, sep [, rep]])
<
    Searches for the given name in the given path.

    A path is a string containing a sequence of templates separated by
    semicolons. For each template, the function replaces each interrogation
    mark (if any) in the template with a copy of name wherein all occurrences
    of sep (a dot, by default) were replaced by rep (the system's directory
    separator, by default), and then tries to open the resulting file name.

    For instance, if the path is the string
>
        "./?.lua;./?.lc;/usr/local/?/init.lua"
<
    the search for the name foo.a will try to open the files ./foo/a.lua,
    ./foo/a.lc, and /usr/local/foo/a/init.lua, in that order.

    Returns the resulting name of the first file that it can open in read mode
    (after closing the file), or nil plus an error message if none succeeds.
    (This error message lists all file names it tried to open.)

==============================================================================
11. string ~
                                            *lua.string*

    This library provides generic functions for string manipulation, such as
    finding and extracting substrings, and pattern matching. When indexing a
    string in Lua, the first character is at position 1 (not at 0, as in C).
    Indices are allowed to be negative and are interpreted as indexing
    backwards, from the end of the string. Thus, the last character is at
    position -1, and so on.

    The string library provides all its functions inside the table string. It
    also sets a metatable for strings where the __index field points to the
    string table. Therefore, you can use the string functions in
    object-oriented style. For instance, string.byte(s,i) can be written as
    s:byte(i).

    The string library assumes one-byte character encodings.

  11.1.  string.byte ~
                                                *lua.string.byte*
>
    string.byte (s [, i [, j]])
<
    Returns the internal numerical codes of the characters s[i], s[i+1], ...,
    s[j]. The default value for i is 1; the default value for j is i. These
    indices are corrected following the same rules of function
    |lua.string.sub|.

    Numerical codes are not necessarily portable across platforms.

  11.2.  string.char ~
                                                *lua.string.char*
>
    string.char (···)
<
    Receives zero or more integers. Returns a string with length equal to the
    number of arguments, in which each character has the internal numerical
    code equal to its corresponding argument.

    Numerical codes are not necessarily portable across platforms.

  11.3.  string.dump ~
                                                *lua.string.dump*
>
    string.dump (function)
<
    Returns a string containing a binary representation of the given function,
    so that a later |lua.load| on this string returns a copy of the function
    (but with new upvalues).

  11.4.  string.find ~
                                                *lua.string.find*
>
    string.find (s, pattern [, init [, plain]])
<
    Looks for the first match of pattern in the string s. If it finds a match,
    then find returns the indices of s where this occurrence starts and ends;
    otherwise, it returns nil. A third, optional numerical argument init
    specifies where to start the search; its default value is 1 and can be
    negative. A value of true as a fourth, optional argument plain turns off
    the pattern matching facilities, so the function does a plain "find
    substring" operation, with no characters in pattern being considered
    magic. Note that if plain is given, then init must be given as well.

    If the pattern has captures, then in a successful match the captured
    values are also returned, after the two indices.

  11.5.  string.format ~
                                                *lua.string.format*
>
    string.format (formatstring, ···)
<
    Returns a formatted version of its variable number of arguments following
    the description given in its first argument (which must be a string). The
    format string follows the same rules as the ANSI C function sprintf. The
    only differences are that the options/modifiers *, h, L, l, n, and p are
    not supported and that there is an extra option, q. The q option formats a
    string between double quotes, using escape sequences when necessary to
    ensure that it can safely be read back by the Lua interpreter. For
    instance, the call
>
        string.format('%q', 'a string with "quotes" and \n new line')
<
    may produce the string:
>
        "a string with \"quotes\" and \new line"
<
    Options A and a (when available), E, e, f, G, and g all expect a number as
    argument. Options c, d, i, o, u, X, and x also expect a number, but the
    range of that number may be limited by the underlying C implementation.
    For options o, u, X, and x, the number cannot be negative. Option q
    expects a string; option s expects a string without embedded zeros. If the
    argument to option s is not a string, it is converted to one following the
    same rules of |lua.tostring|.

  11.6.  string.gmatch ~
                                                *lua.string.gmatch*
>
    string.gmatch (s, pattern)
<
    Returns an iterator function that, each time it is called, returns the
    next captures from pattern over the string s. If pattern specifies no
    captures, then the whole match is produced in each call.

    As an example, the following loop will iterate over all the words from
    string s, printing one per line:
>
        s = "hello world from Lua"
        for w in string.gmatch(s, "%a+") do
            print(w)
        end
<
    The next example collects all pairs key=value from the given string into a
    table:
>
        t = {}
        s = "from=world, to=Lua"
        for k, v in string.gmatch(s, "(%w+)=(%w+)") do
            t[k] = v
        end
<
    For this function, a caret '^' at the start of a pattern does not work as
    an anchor, as this would prevent the iteration.

  11.7.  string.gsub ~
                                                *lua.string.gsub*
>
    string.gsub (s, pattern, repl [, n])
<
    Returns a copy of s in which all (or the first n, if given) occurrences of
    the pattern have been replaced by a replacement string specified by repl,
    which can be a string, a table, or a function. gsub also returns, as its
    second value, the total number of matches that occurred. The name gsub
    comes from `Global` `SUBstitution`.

    If repl is a string, then its value is used for replacement. The character
    % works as an escape character: any sequence in repl of the form %d, with
    d between 1 and 9, stands for the value of the d-th captured substring.
    The sequence %0 stands for the whole match. The sequence %% stands for a
    single %.

    If repl is a table, then the table is queried for every match, using the
    first capture as the key.

    If repl is a function, then this function is called every time a match
    occurs, with all captured substrings passed as arguments, in order.

    In any case, if the pattern specifies no captures, then it behaves as if
    the whole pattern was inside a capture.

    If the value returned by the table query or by the function call is a
    string or a number, then it is used as the replacement string; otherwise,
    if it is `false` or `nil`, then there is no replacement (that is, the
        original match is kept in the string).

    Here are some examples:
>
        x = string.gsub("hello world", "(%w+)", "%1 %1")
        --> x="hello hello world world"

        x = string.gsub("hello world", "%w+", "%0 %0", 1)
        --> x="hello hello world"

        x = string.gsub("hello world from Lua", "(%w+)%s*(%w+)", "%2 %1")
        --> x="world hello Lua from"

        x = string.gsub("home = $HOME, user = $USER", "%$(%w+)", os.getenv)
        --> x="home = /home/roberto, user = roberto"

        x = string.gsub("4+5 = $return 4+5$", "%$(.-)%$", function (s)
            return load(s)()
        end)
        --> x="4+5 = 9"

        local t = {name="lua", version="5.2"}
        x = string.gsub("$name-$version.tar.gz", "%$(%w+)", t)
        --> x="lua-5.2.tar.gz"
<
  11.8.  string.len ~
                                                *lua.string.len*
>
    string.len (s)
<
    Receives a string and returns its length. The empty string "" has length
    0. Embedded zeros are counted, so "a\000bc\000" has length 5.

  11.9.  string.lower ~
                                                *lua.string.lower*
>
    string.lower (s)
<
    Receives a string and returns a copy of this string with all uppercase
    letters changed to lowercase. All other characters are left unchanged. The
    definition of what an uppercase letter is depends on the current locale.

  11.10. string.match ~
                                                *lua.string.match*
>
    string.match (s, pattern [, init])
<
    Looks for the first match of pattern in the string s. If it finds one,
    then match returns the captures from the pattern; otherwise it returns
    nil. If pattern specifies no captures, then the whole match is returned. A
    third, optional numerical argument init specifies where to start the
    search; its default value is 1 and can be negative.

  11.11. string.rep ~
                                                *lua.string.rep*
>
    string.rep (s, n [, sep])
<
    Returns a string that is the concatenation of n copies of the string s
    separated by the string sep. The default value for sep is the empty string
    (that is, no separator).

  11.12. string.reverse ~
                                                *lua.string.reverse*
>
    string.reverse (s)
<
    Returns a string that is the string s reversed.

  11.13. string.sub ~
                                                *lua.string.sub*
>
    string.sub (s, i [, j])
<
    Returns the substring of s that starts at i and continues until j; i and j
    can be negative. If j is absent, then it is assumed to be equal to -1
    (which is the same as the string length). In particular, the call
    string.sub(s,1,j) returns a prefix of s with length j, and string.sub(s,
    -i) returns a suffix of s with length i.

    If, after the translation of negative indices, i is less than 1, it is
    corrected to 1. If j is greater than the string length, it is corrected to
    that length. If, after these corrections, i is greater than j, the
    function returns the empty string.

  11.14. string.upper ~
                                                *lua.string.upper*
>
    string.upper (s)
<
    Receives a string and returns a copy of this string with all lowercase
    letters changed to uppercase. All other characters are left unchanged. The
    definition of what a lowercase letter is depends on the current locale.

  11.15. patterns ~
                                                *lua.patterns*
    Character Class:

    A character class is used to represent a set of characters. The following
    combinations are allowed in describing a character class:

        `x`: (where x is not one of the magic characters ^$()%.[]*+-?)
        represents the character x itself.

        `.`: (a dot) represents all characters.

        `%a`: represents all letters.

        `%c`: represents all control characters.

        `%d`: represents all digits.

        `%g`: represents all printable characters except space.

        `%l`: represents all lowercase letters.

        `%p`: represents all punctuation characters.

        `%s`: represents all space characters.

        `%u`: represents all uppercase letters.

        `%w`: represents all alphanumeric characters.

        `%x`: represents all hexadecimal digits.

        `%x`: (where x is any non-alphanumeric character) represents the
        character x. This is the standard way to escape the magic characters.
        Any punctuation character (even the non magic) can be preceded by a
        '%' when used to represent itself in a pattern.

        `[set]`: represents the class which is the union of all characters in
        set. A range of characters can be specified by separating the end
        characters of the range, in ascending order, with a '-', All classes
        %x described above can also be used as components in set. All other
        characters in set represent themselves. For example, [%w_] (or [_%w])
        represents all alphanumeric characters plus the underscore, [0-7]
        represents the octal digits, and [0-7%l%-] represents the octal digits
        plus the lowercase letters plus the '-' character.

        The interaction between ranges and classes is not defined. Therefore,
        patterns like [%a-z] or [a-%%] have no meaning.

        `[^set]`: represents the complement of set, where set is interpreted
        as above.

    For all classes represented by single letters (%a, %c, etc.), the
    corresponding uppercase letter represents the complement of the class. For
    instance, %S represents all non-space characters.

    The definitions of letter, space, and other character groups depend on the
    current locale. In particular, the class [a-z] may not be equivalent to
    %l.

    Pattern Item:

    A pattern item can be

        a single character class, which matches any single character in the
        class;

        a single character class followed by '*', which matches 0 or more
        repetitions of characters in the class. These repetition items will
        always match the longest possible sequence;

        a single character class followed by '+', which matches 1 or more
        repetitions of characters in the class. These repetition items will
        always match the longest possible sequence;

        a single character class followed by '-', which also matches 0 or more
        repetitions of characters in the class. Unlike '*', these repetition
        items will always match the shortest possible sequence;

        a single character class followed by '?', which matches 0 or 1
        occurrence of a character in the class;

        %n, for n between 1 and 9; such item matches a substring equal to the
        n-th captured string (see below);

        %bxy, where x and y are two distinct characters; such item matches
        strings that start with x, end with y, and where the x and y are
        balanced. This means that, if one reads the string from left to right,
        counting +1 for an x and -1 for a y, the ending y is the first y where
        the count reaches 0. For instance, the item %b() matches expressions
        with balanced parentheses.

        %f[set], a frontier pattern; such item matches an empty string at any
        position such that the next character belongs to set and the previous
        character does not belong to set. The set set is interpreted as
        previously described. The beginning and the end of the subject are
        handled as if they were the character '\0'.

    Pattern:

    A pattern is a sequence of pattern items. A caret '^' at the beginning of
    a pattern anchors the match at the beginning of the subject string. A '$'
    at the end of a pattern anchors the match at the end of the subject
    string. At other positions, '^' and '$' have no special meaning and
    represent themselves.

    Captures:

    A pattern can contain sub-patterns enclosed in parentheses; they describe
    captures. When a match succeeds, the substrings of the subject string that
    match captures are stored (captured) for future use. Captures are numbered
    according to their left parentheses. For instance, in the pattern
    "(a*(.)%w(%s*))", the part of the string matching "a*(.)%w(%s*)" is stored
    as the first capture (and therefore has number 1); the character matching
    "." is captured with number 2, and the part matching "%s*" has number 3.

    As a special case, the empty capture () captures the current string
    position (a number). For instance, if we apply the pattern "()aa()" on the
    string "flaaap", there will be two captures: 3 and 5.

==============================================================================
12. table ~
                                            *lua.table*

    This library provides generic functions for table manipulation. It
    provides all its functions inside the table table.

    Remember that, whenever an operation needs the length of a table, the
    table should be a proper sequence or have a __len metamethod (see
    `http://www.lua.org/manual/5.2/manual.html#3.4.6`). All functions ignore
    non-numeric keys in tables given as arguments.

    For performance reasons, all table accesses (get/set) performed by these
    functions are raw.

  12.1.  table.concat ~
                                                *lua.table.concat*
>
    table.concat (list [, sep [, i [, j]]])
<
    Given a list where all elements are strings or numbers, returns the string
    list[i]..sep..list[i+1] ··· sep..list[j]. The default value for sep is the
    empty string, the default for i is 1, and the default for j is #list. If i
    is greater than j, returns the empty string.

  12.2.  table.insert ~
                                                *lua.table.insert*
>
    table.insert (list, [pos,] value)
<
    Inserts element value at position pos in list, shifting up the elements
    list[pos], list[pos+1], ···, list[#list]. The default value for pos is
    #list+1, so that a call table.insert(t,x) inserts x at the end of list t.

  12.3.  table.pack ~
                                                *lua.table.pack*
>
    table.pack (···)
<
    Returns a new table with all parameters stored into keys 1, 2, etc. and
    with a field "n" with the total number of parameters. Note that the
    resulting table may not be a sequence.

  12.4.  table.remove ~
                                                *lua.table.remove*
>
    table.remove (list [, pos])
<
    Removes from list the element at position pos, returning the value of the
    removed element. When pos is an integer between 1 and #list, it shifts
    down the elements list[pos+1], list[pos+2], ···, list[#list] and erases
    element list[#list]; The index pos can also be 0 when #list is 0, or #list
    + 1; in those cases, the function erases the element list[pos].

    The default value for pos is #list, so that a call table.remove(t) removes
    the last element of list t.

  12.5.  table.sort ~
                                                *lua.table.sort*
>
    table.sort (list [, comp])
<
    Sorts list elements in a given order, in-place, from list[1] to
    list[#list]. If comp is given, then it must be a function that receives
    two list elements and returns true when the first element must come before
    the second in the final order (so that not comp(list[i+1],list[i]) will be
    true after the sort). If comp is not given, then the standard Lua operator
    < is used instead.

    The sort algorithm is not stable; that is, elements considered equal by
    the given order may have their relative positions changed by the sort.

  12.6.  table.unpack ~
                                                *lua.table.unpack*
>
    table.unpack (list [, i [, j]])
<
    Returns the elements from the given table. This function is equivalent to
>
        return list[i], list[i+1], ···, list[j]
<
    By default, i is 1 and j is #list.

